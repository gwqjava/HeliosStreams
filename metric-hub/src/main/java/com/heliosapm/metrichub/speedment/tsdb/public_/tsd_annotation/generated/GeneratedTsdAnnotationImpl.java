package com.heliosapm.metrichub.speedment.tsdb.public_.tsd_annotation.generated;

import com.heliosapm.metrichub.speedment.tsdb.public_.tsd_annotation.TsdAnnotation;
import com.heliosapm.metrichub.speedment.tsdb.public_.tsd_tsmeta.TsdTsmeta;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalLong;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation of the {@link
 * com.heliosapm.metrichub.speedment.tsdb.public_.tsd_annotation.TsdAnnotation}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedTsdAnnotationImpl implements TsdAnnotation {
    
    private Long annid;
    private int version;
    private Timestamp startTime;
    private Timestamp lastUpdate;
    private String description;
    private String notes;
    private Long fqnid;
    private Timestamp endTime;
    private String custom;
    
    protected GeneratedTsdAnnotationImpl() {
        
    }
    
    @Override
    public Long getAnnid() {
        return annid;
    }
    
    @Override
    public int getVersion() {
        return version;
    }
    
    @Override
    public Timestamp getStartTime() {
        return startTime;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public String getDescription() {
        return description;
    }
    
    @Override
    public Optional<String> getNotes() {
        return Optional.ofNullable(notes);
    }
    
    @Override
    public OptionalLong getFqnid() {
        return OptionalUtil.ofNullable(fqnid);
    }
    
    @Override
    public Optional<Timestamp> getEndTime() {
        return Optional.ofNullable(endTime);
    }
    
    @Override
    public Optional<String> getCustom() {
        return Optional.ofNullable(custom);
    }
    
    @Override
    public TsdAnnotation setAnnid(Long annid) {
        this.annid = annid;
        return this;
    }
    
    @Override
    public TsdAnnotation setVersion(int version) {
        this.version = version;
        return this;
    }
    
    @Override
    public TsdAnnotation setStartTime(Timestamp startTime) {
        this.startTime = startTime;
        return this;
    }
    
    @Override
    public TsdAnnotation setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public TsdAnnotation setDescription(String description) {
        this.description = description;
        return this;
    }
    
    @Override
    public TsdAnnotation setNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    @Override
    public TsdAnnotation setFqnid(Long fqnid) {
        this.fqnid = fqnid;
        return this;
    }
    
    @Override
    public TsdAnnotation setEndTime(Timestamp endTime) {
        this.endTime = endTime;
        return this;
    }
    
    @Override
    public TsdAnnotation setCustom(String custom) {
        this.custom = custom;
        return this;
    }
    
    @Override
    public Optional<TsdTsmeta> findFqnid(Manager<TsdTsmeta> foreignManager) {
        if (getFqnid().isPresent()) {
            return foreignManager.stream().filter(TsdTsmeta.FQNID.equal(getFqnid().getAsLong())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("annid = " + Objects.toString(getAnnid()));
        sj.add("version = " + Objects.toString(getVersion()));
        sj.add("startTime = " + Objects.toString(getStartTime()));
        sj.add("lastUpdate = " + Objects.toString(getLastUpdate()));
        sj.add("description = " + Objects.toString(getDescription()));
        sj.add("notes = " + Objects.toString(OptionalUtil.unwrap(getNotes())));
        sj.add("fqnid = " + Objects.toString(OptionalUtil.unwrap(getFqnid())));
        sj.add("endTime = " + Objects.toString(OptionalUtil.unwrap(getEndTime())));
        sj.add("custom = " + Objects.toString(OptionalUtil.unwrap(getCustom())));
        return "TsdAnnotationImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof TsdAnnotation)) { return false; }
        final TsdAnnotation thatTsdAnnotation = (TsdAnnotation)that;
        if (!Objects.equals(this.getAnnid(), thatTsdAnnotation.getAnnid())) {return false; }
        if (this.getVersion() != thatTsdAnnotation.getVersion()) {return false; }
        if (!Objects.equals(this.getStartTime(), thatTsdAnnotation.getStartTime())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatTsdAnnotation.getLastUpdate())) {return false; }
        if (!Objects.equals(this.getDescription(), thatTsdAnnotation.getDescription())) {return false; }
        if (!Objects.equals(this.getNotes(), thatTsdAnnotation.getNotes())) {return false; }
        if (!Objects.equals(this.getFqnid(), thatTsdAnnotation.getFqnid())) {return false; }
        if (!Objects.equals(this.getEndTime(), thatTsdAnnotation.getEndTime())) {return false; }
        if (!Objects.equals(this.getCustom(), thatTsdAnnotation.getCustom())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getAnnid());
        hash = 31 * hash + Integer.hashCode(getVersion());
        hash = 31 * hash + Objects.hashCode(getStartTime());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        hash = 31 * hash + Objects.hashCode(getDescription());
        hash = 31 * hash + Objects.hashCode(getNotes());
        hash = 31 * hash + Objects.hashCode(getFqnid());
        hash = 31 * hash + Objects.hashCode(getEndTime());
        hash = 31 * hash + Objects.hashCode(getCustom());
        return hash;
    }
}