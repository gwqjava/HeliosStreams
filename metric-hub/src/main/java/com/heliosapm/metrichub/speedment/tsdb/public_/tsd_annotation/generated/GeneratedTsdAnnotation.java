package com.heliosapm.metrichub.speedment.tsdb.public_.tsd_annotation.generated;

import com.heliosapm.metrichub.speedment.tsdb.public_.tsd_annotation.TsdAnnotation;
import com.heliosapm.metrichub.speedment.tsdb.public_.tsd_tsmeta.TsdTsmeta;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalLong;
import javax.annotation.Generated;

/**
 * The generated base for the {@link
 * com.heliosapm.metrichub.speedment.tsdb.public_.tsd_annotation.TsdAnnotation}-interface
 * representing entities of the {@code tsd_annotation}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedTsdAnnotation {
    
    /**
     * This Field corresponds to the {@link TsdAnnotation} field that can be
     * obtained using the {@link TsdAnnotation#getAnnid()} method.
     */
    final ComparableField<TsdAnnotation, Long, Long> ANNID = ComparableField.create(
        Identifier.ANNID,
        TsdAnnotation::getAnnid,
        TsdAnnotation::setAnnid,
        TypeMapper.identity(), 
        true
    );
    /**
     * This Field corresponds to the {@link TsdAnnotation} field that can be
     * obtained using the {@link TsdAnnotation#getVersion()} method.
     */
    final IntField<TsdAnnotation, Integer> VERSION = IntField.create(
        Identifier.VERSION,
        TsdAnnotation::getVersion,
        TsdAnnotation::setVersion,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link TsdAnnotation} field that can be
     * obtained using the {@link TsdAnnotation#getStartTime()} method.
     */
    final ComparableField<TsdAnnotation, Timestamp, Timestamp> START_TIME = ComparableField.create(
        Identifier.START_TIME,
        TsdAnnotation::getStartTime,
        TsdAnnotation::setStartTime,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link TsdAnnotation} field that can be
     * obtained using the {@link TsdAnnotation#getLastUpdate()} method.
     */
    final ComparableField<TsdAnnotation, Timestamp, Timestamp> LAST_UPDATE = ComparableField.create(
        Identifier.LAST_UPDATE,
        TsdAnnotation::getLastUpdate,
        TsdAnnotation::setLastUpdate,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link TsdAnnotation} field that can be
     * obtained using the {@link TsdAnnotation#getDescription()} method.
     */
    final StringField<TsdAnnotation, String> DESCRIPTION = StringField.create(
        Identifier.DESCRIPTION,
        TsdAnnotation::getDescription,
        TsdAnnotation::setDescription,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link TsdAnnotation} field that can be
     * obtained using the {@link TsdAnnotation#getNotes()} method.
     */
    final StringField<TsdAnnotation, String> NOTES = StringField.create(
        Identifier.NOTES,
        o -> OptionalUtil.unwrap(o.getNotes()),
        TsdAnnotation::setNotes,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link TsdAnnotation} field that can be
     * obtained using the {@link TsdAnnotation#getFqnid()} method.
     */
    final ComparableForeignKeyField<TsdAnnotation, Long, Long, TsdTsmeta> FQNID = ComparableForeignKeyField.create(
        Identifier.FQNID,
        o -> OptionalUtil.unwrap(o.getFqnid()),
        TsdAnnotation::setFqnid,
        TsdTsmeta.FQNID,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link TsdAnnotation} field that can be
     * obtained using the {@link TsdAnnotation#getEndTime()} method.
     */
    final ComparableField<TsdAnnotation, Timestamp, Timestamp> END_TIME = ComparableField.create(
        Identifier.END_TIME,
        o -> OptionalUtil.unwrap(o.getEndTime()),
        TsdAnnotation::setEndTime,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link TsdAnnotation} field that can be
     * obtained using the {@link TsdAnnotation#getCustom()} method.
     */
    final StringField<TsdAnnotation, String> CUSTOM = StringField.create(
        Identifier.CUSTOM,
        o -> OptionalUtil.unwrap(o.getCustom()),
        TsdAnnotation::setCustom,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the annid of this TsdAnnotation. The annid field corresponds to
     * the database column tsdb.public.tsd_annotation.annid.
     * 
     * @return the annid of this TsdAnnotation
     */
    Long getAnnid();
    
    /**
     * Returns the version of this TsdAnnotation. The version field corresponds
     * to the database column tsdb.public.tsd_annotation.version.
     * 
     * @return the version of this TsdAnnotation
     */
    int getVersion();
    
    /**
     * Returns the startTime of this TsdAnnotation. The startTime field
     * corresponds to the database column tsdb.public.tsd_annotation.start_time.
     * 
     * @return the startTime of this TsdAnnotation
     */
    Timestamp getStartTime();
    
    /**
     * Returns the lastUpdate of this TsdAnnotation. The lastUpdate field
     * corresponds to the database column
     * tsdb.public.tsd_annotation.last_update.
     * 
     * @return the lastUpdate of this TsdAnnotation
     */
    Timestamp getLastUpdate();
    
    /**
     * Returns the description of this TsdAnnotation. The description field
     * corresponds to the database column
     * tsdb.public.tsd_annotation.description.
     * 
     * @return the description of this TsdAnnotation
     */
    String getDescription();
    
    /**
     * Returns the notes of this TsdAnnotation. The notes field corresponds to
     * the database column tsdb.public.tsd_annotation.notes.
     * 
     * @return the notes of this TsdAnnotation
     */
    Optional<String> getNotes();
    
    /**
     * Returns the fqnid of this TsdAnnotation. The fqnid field corresponds to
     * the database column tsdb.public.tsd_annotation.fqnid.
     * 
     * @return the fqnid of this TsdAnnotation
     */
    OptionalLong getFqnid();
    
    /**
     * Returns the endTime of this TsdAnnotation. The endTime field corresponds
     * to the database column tsdb.public.tsd_annotation.end_time.
     * 
     * @return the endTime of this TsdAnnotation
     */
    Optional<Timestamp> getEndTime();
    
    /**
     * Returns the custom of this TsdAnnotation. The custom field corresponds to
     * the database column tsdb.public.tsd_annotation.custom.
     * 
     * @return the custom of this TsdAnnotation
     */
    Optional<String> getCustom();
    
    /**
     * Sets the annid of this TsdAnnotation. The annid field corresponds to the
     * database column tsdb.public.tsd_annotation.annid.
     * 
     * @param annid to set of this TsdAnnotation
     * @return      this TsdAnnotation instance
     */
    TsdAnnotation setAnnid(Long annid);
    
    /**
     * Sets the version of this TsdAnnotation. The version field corresponds to
     * the database column tsdb.public.tsd_annotation.version.
     * 
     * @param version to set of this TsdAnnotation
     * @return        this TsdAnnotation instance
     */
    TsdAnnotation setVersion(int version);
    
    /**
     * Sets the startTime of this TsdAnnotation. The startTime field corresponds
     * to the database column tsdb.public.tsd_annotation.start_time.
     * 
     * @param startTime to set of this TsdAnnotation
     * @return          this TsdAnnotation instance
     */
    TsdAnnotation setStartTime(Timestamp startTime);
    
    /**
     * Sets the lastUpdate of this TsdAnnotation. The lastUpdate field
     * corresponds to the database column
     * tsdb.public.tsd_annotation.last_update.
     * 
     * @param lastUpdate to set of this TsdAnnotation
     * @return           this TsdAnnotation instance
     */
    TsdAnnotation setLastUpdate(Timestamp lastUpdate);
    
    /**
     * Sets the description of this TsdAnnotation. The description field
     * corresponds to the database column
     * tsdb.public.tsd_annotation.description.
     * 
     * @param description to set of this TsdAnnotation
     * @return            this TsdAnnotation instance
     */
    TsdAnnotation setDescription(String description);
    
    /**
     * Sets the notes of this TsdAnnotation. The notes field corresponds to the
     * database column tsdb.public.tsd_annotation.notes.
     * 
     * @param notes to set of this TsdAnnotation
     * @return      this TsdAnnotation instance
     */
    TsdAnnotation setNotes(String notes);
    
    /**
     * Sets the fqnid of this TsdAnnotation. The fqnid field corresponds to the
     * database column tsdb.public.tsd_annotation.fqnid.
     * 
     * @param fqnid to set of this TsdAnnotation
     * @return      this TsdAnnotation instance
     */
    TsdAnnotation setFqnid(Long fqnid);
    
    /**
     * Sets the endTime of this TsdAnnotation. The endTime field corresponds to
     * the database column tsdb.public.tsd_annotation.end_time.
     * 
     * @param endTime to set of this TsdAnnotation
     * @return        this TsdAnnotation instance
     */
    TsdAnnotation setEndTime(Timestamp endTime);
    
    /**
     * Sets the custom of this TsdAnnotation. The custom field corresponds to
     * the database column tsdb.public.tsd_annotation.custom.
     * 
     * @param custom to set of this TsdAnnotation
     * @return       this TsdAnnotation instance
     */
    TsdAnnotation setCustom(String custom);
    
    /**
     * Queries the specified manager for the referenced TsdTsmeta. If no such
     * TsdTsmeta exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<TsdTsmeta> findFqnid(Manager<TsdTsmeta> foreignManager);
    
    enum Identifier implements ColumnIdentifier<TsdAnnotation> {
        
        ANNID ("annid"),
        VERSION ("version"),
        START_TIME ("start_time"),
        LAST_UPDATE ("last_update"),
        DESCRIPTION ("description"),
        NOTES ("notes"),
        FQNID ("fqnid"),
        END_TIME ("end_time"),
        CUSTOM ("custom");
        
        private final String columnName;
        private final TableIdentifier<TsdAnnotation> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(getDbmsName(), getSchemaName(), getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "tsdb";
        }
        
        @Override
        public String getSchemaName() {
            return "public";
        }
        
        @Override
        public String getTableName() {
            return "tsd_annotation";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<TsdAnnotation> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}