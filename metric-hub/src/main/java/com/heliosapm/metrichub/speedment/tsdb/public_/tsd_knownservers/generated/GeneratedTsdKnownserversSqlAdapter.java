package com.heliosapm.metrichub.speedment.tsdb.public_.tsd_knownservers.generated;

import com.heliosapm.metrichub.speedment.tsdb.public_.tsd_knownservers.TsdKnownservers;
import com.heliosapm.metrichub.speedment.tsdb.public_.tsd_knownservers.TsdKnownserversImpl;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.heliosapm.metrichub.speedment.tsdb.public_.tsd_knownservers.TsdKnownservers}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedTsdKnownserversSqlAdapter {
    
    private final TableIdentifier<TsdKnownservers> tableIdentifier;
    
    protected GeneratedTsdKnownserversSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("tsdb", "public", "tsd_knownservers");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(SqlStreamSupplierComponent streamSupplierComponent, SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected TsdKnownservers apply(ResultSet resultSet) throws SpeedmentException{
        final TsdKnownservers entity = createEntity();
        try {
            entity.setHost(resultSet.getString(1));
            entity.setPort(resultSet.getInt(2));
            entity.setUp(resultSet.getString(3));
            entity.setUri(resultSet.getString(4));
            entity.setCreated(resultSet.getTimestamp(5));
            entity.setLastUpdate(getTimestamp(resultSet, 6));
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected TsdKnownserversImpl createEntity() {
        return new TsdKnownserversImpl();
    }
}